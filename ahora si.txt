import pandas as pd
import tkinter as tk
from tkinter import filedialog

nombre_columna_fecha = 'Fecha-inicio'
nombre_columna_tipo = 'Unnamed: 1'
nombre_columna_ws = 'WS'
nombre_columna_entorno = 'Entorno'
nombre_columna_numero_ticket = 'N°TK'

pd.set_option('display.max_colwidth', None)

def mostrar_conteo_por_mes(df, columna_fecha, tipo):
    df[columna_fecha] = pd.to_datetime(df[columna_fecha], errors='coerce', format='%d-%b', dayfirst=True)
    df[columna_fecha] = pd.to_datetime(df[columna_fecha], errors='coerce', format='%d/%m/%Y')

    df['Mes'] = df[columna_fecha].dt.strftime('%Y-%m')

    df_tipo = df[df[nombre_columna_tipo].str.contains(tipo, case=False, na=False)]

    df_tipo = df[df[nombre_columna_tipo].str.contains(tipo, case=False, na=False)].copy()
    df_tipo['Informacion'] = df_tipo.apply(lambda x: f"Tipo: {x[nombre_columna_tipo]}, Número de Ticket: {x[nombre_columna_numero_ticket]}, WS: {x[nombre_columna_ws]}, Entorno: {x[nombre_columna_entorno]}", axis=1)

    conteo_total_por_mes = df_tipo.groupby(['Mes', 'Informacion']).size().reset_index(name='Count')

    return conteo_total_por_mes

def mostrar_conteo_total_por_mes(df, columna_fecha):
    df[columna_fecha] = pd.to_datetime(df[columna_fecha], errors='coerce', format='%d-%b', dayfirst=True)
    df[columna_fecha] = pd.to_datetime(df[columna_fecha], errors='coerce', format='%d/%m/%Y')

    df['Mes'] = df[columna_fecha].dt.strftime('%Y-%m')

    df_requerimientos = mostrar_conteo_por_mes(df, columna_fecha, 'Requerimiento')
    df_incidentes = mostrar_conteo_por_mes(df, columna_fecha, 'Incidente')

    total_requerimientos_por_mes = df_requerimientos.groupby('Mes')['Count'].sum().reset_index(name='Total Requerimientos')
    total_incidentes_por_mes = df_incidentes.groupby('Mes')['Count'].sum().reset_index(name='Total Incidentes')

    return df_requerimientos, df_incidentes, total_requerimientos_por_mes, total_incidentes_por_mes

def cargar_excel():
    ruta_archivo = filedialog.askopenfilename(title="Seleccionar archivo Excel", filetypes=[("Archivos Excel", "*.xlsx;*.xls")])

    if ruta_archivo:
        df = pd.read_excel(ruta_archivo, header=0)

        if nombre_columna_fecha in df.columns and nombre_columna_tipo in df.columns:
            df_requerimientos, df_incidentes, total_requerimientos, total_incidentes = mostrar_conteo_total_por_mes(df, nombre_columna_fecha)

            for mes, df_mes in df_requerimientos.groupby('Mes'):
                print(f"\nRequerimientos del mes {mes}:")
                print(df_mes[['Mes', 'Informacion']])  # Selecciona solo las columnas necesarias

            for mes, df_mes in df_incidentes.groupby('Mes'):
                print(f"\nIncidentes del mes {mes}:")
                print(df_mes[['Mes', 'Informacion']])  # Selecciona solo las columnas necesarias

            print("\nTotal de Requerimientos por Mes:")
            print(total_requerimientos)

            print("\nTotal de Incidentes por Mes:")
            print(total_incidentes)
        else:
            print("Las columnas requeridas no se encontraron en el DataFrame.")

# Crear un diccionario para almacenar los resultados por mes para requerimientos e incidentes
resultados_por_mes_requerimientos = {}
resultados_por_mes_incidentes = {}

app = tk.Tk()
app.title("Programa")

btn_cargar_excel = tk.Button(app, text="Cargar Excel", command=cargar_excel)
btn_cargar_excel.pack(pady=20)

app.mainloop()
